// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/package-format/appimage/templates/AppRun.sh
package package_format

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appimageTemplatesApprunSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6f\x73\xdb\x36\x93\x7f\xcf\x4f\xb1\xa1\xf8\xa4\x76\x27\x14\x2d\xf7\xc9\xd3\xd4\x19\x5d\xab\x54\x8c\xc3\x89\xff\x8d\xa5\xb4\xee\xc5\x39\x0d\x45\xae\x44\x8c\x28\x80\x25\x40\x5b\x8a\xa2\xef\x7e\xb3\x00\x29\x93\x92\xdc\x24\x77\x7e\x63\x99\xe0\x62\xff\x63\xf7\xb7\x60\xeb\x99\x37\x66\xdc\x1b\x87\x32\xb1\x24\x2a\x70\xd1\xb2\xd8\x04\x3e\xc2\x33\x70\x3f\x83\xed\xf4\xfd\x37\x1f\x4e\x6d\xf8\x04\xaf\x41\x25\xc8\x2d\x00\xe4\x77\x16\x80\xa6\x5d\x58\x13\x66\x59\xc3\x77\xc1\xa0\x6b\x3b\x47\xb6\xd5\x82\x44\xa9\xec\xc4\xf3\xa4\x0a\xa3\x99\xb8\xc3\x7c\x92\x8a\xfb\x76\x24\xe6\xde\xdf\x05\x4a\xc5\x04\x97\xde\x4f\x9d\x5f\x8e\x5e\x75\x5e\x79\x56\x98\x4f\x65\xf7\xc0\x76\x7e\xb3\x0f\xad\x8b\x0f\xe7\x6f\xfc\xeb\xd1\xe5\xdb\x51\xef\xfa\x94\xb8\xb5\x6c\xcb\x6a\x41\x96\x62\x28\x11\x62\x01\x5c\x28\x88\x92\x90\x4f\x11\x9c\x3f\xfc\x8b\xfe\xe5\xf5\xd5\xb5\xff\x36\xb8\x81\x50\x02\x53\x70\xcf\xd2\x14\xc2\x34\x15\xf7\x30\x11\x39\xc4\x28\x67\x4a\x64\x30\x61\x29\x4a\xab\x05\x63\x4c\x05\x9f\x32\x3e\x05\x25\xa0\x97\x65\xc1\x3c\x9c\xa2\xa4\x87\x31\x42\x8e\x91\x98\x72\xf6\x19\x63\x18\x2f\x61\x52\xa8\x22\xc7\x0d\xd1\x7b\xa6\x20\x12\xf3\x4c\x70\xe4\x8a\x58\xc9\x22\x4a\x48\x68\x25\x82\x71\x85\xd3\x3c\x24\xdb\x20\x0e\x71\x2e\xb8\xb4\xea\x0a\x76\xc3\x2c\x63\xc4\x69\xc6\x54\xe9\x5a\xf7\x33\x38\xbd\xab\xab\x7e\x70\x5d\xf7\x6b\x0b\xde\x32\x1e\xd3\x13\x09\xef\xb3\xbc\x0d\x81\x02\x26\xf5\x4a\xcc\x72\x8c\x94\xc8\x97\xa0\x92\x90\x34\xe2\x2a\x64\x5c\x12\xe5\x75\xc1\xdb\x7a\xfb\x30\x61\x12\x42\x29\x8b\x39\x99\x46\x64\x8a\x56\x64\x94\xb3\x4c\x41\x8e\x92\xc5\x28\x81\x71\xfa\xad\x89\x01\x91\x43\x08\xb2\x18\x6f\x64\x18\x76\xc1\xa4\xb1\x9f\x49\xc8\x0b\x5e\x6d\x0f\xf9\xc6\x43\x2f\xb4\x01\x15\x43\xbd\x44\x94\x8a\xcd\x11\x52\x36\xc3\x74\x09\x49\x28\x21\x4c\x73\x0c\xe3\xa5\x4e\x9c\xd2\x7a\x0b\x20\x0b\x55\xd2\xb5\x9d\x83\x98\xe5\x3c\x9c\x23\xd8\xce\x01\x91\xa5\x8c\xcf\xc0\x9d\x80\xed\xac\x28\xbb\xd6\xf6\xa1\x7d\x68\x5b\x00\xf7\x09\x4b\x11\x3e\x7e\x04\xdb\xa1\x9d\x36\x3c\xeb\x82\x6d\xc3\xf3\xe7\x94\xae\x58\xae\x7a\x4e\xc7\x86\x4f\x9f\x5e\x43\x2c\x2c\x80\x52\x86\xb3\xa2\x9f\x7f\x79\x3f\xae\x2d\x80\x58\x70\xb4\x00\x8c\x16\xdd\x92\x97\xce\x65\x5c\x64\x22\x57\x70\xd5\x1b\xbe\xeb\xda\xce\xca\x50\xac\x4f\x36\xff\x79\x85\xcc\x3d\x39\x66\xfc\xc4\x59\x11\xd1\xda\xae\xb6\xdc\xf4\x4f\x47\xfd\xde\xb0\x37\xea\x07\xd7\x83\xae\xdd\xf6\x64\x12\xe6\xe8\x9d\x98\x1d\xfa\xff\x29\x17\x73\x34\x0b\xa9\x88\xc2\x74\x0f\xc9\x89\xb3\x6a\x30\x7a\xe0\x7f\xd6\x1f\x9d\x05\x6f\xae\x7b\xd7\x7f\x8d\xb6\xb4\x33\x0c\xd9\xf8\xc4\x59\x6d\x11\x3d\xaa\xdd\x66\xaf\x5d\x97\x6d\xef\x08\xdf\xd1\xde\xfb\x67\xf5\x2b\x71\xa7\x03\x7f\x38\x0c\x2e\x4e\x07\xa3\xc1\xef\xef\xfc\x73\xcd\x6e\x5b\xe3\x92\x6b\xca\xc6\xee\x71\xfb\xc8\x93\x51\x82\xf3\x50\x9e\x38\xab\x7d\x9b\xd7\xb6\x65\xf5\xfd\xc1\xfb\xe1\xe5\xd5\xe8\x6d\x70\xe6\x77\xed\x32\x87\xbc\xd5\xaa\xdd\x37\x47\xf1\x2d\x4b\xf1\x22\x9c\xe3\x7a\x6d\x5b\x6f\x82\x8b\x06\x89\xbf\xc0\xa8\x50\xe1\xf8\x81\x62\x73\x14\x35\x59\x70\xde\x3b\xf5\x47\xfe\x4d\x30\x1c\xf5\xde\x0e\xfd\xeb\x51\x70\x31\x18\xf6\xce\xce\x1a\x95\x4f\xe5\x61\x06\xa1\xc2\x05\x53\x40\xa4\x3a\x63\x98\xf4\x8b\x34\xec\x45\x11\x66\x0a\xe3\x6e\xc7\xb2\x0c\xc5\xc1\xa1\xb5\xb2\x00\xb4\x14\xa7\x49\x04\xdd\x2e\x74\xea\x8c\x2b\xb2\x66\x15\x04\x17\xff\x86\xa3\x26\x1d\x00\x2e\x30\x02\xdb\x79\x13\x5c\xd8\x7a\x05\x53\x89\xbb\xaf\xe8\xe4\x50\x7d\xfd\xf8\xdb\xa7\xb5\xa1\x9b\x30\x4b\xff\x59\x5b\x16\xe6\xb9\xc8\xeb\xfa\xb9\x0b\xd0\x21\xa1\x4e\xf0\x19\x39\x53\xcb\xa6\xd4\x9d\xdc\xb3\xa1\x24\x73\x5d\xcd\x0c\x5c\x57\xe1\x42\x91\xd4\xce\xda\x86\xe3\xff\xf2\x62\xbc\xf3\x78\x91\xa6\xd4\x30\xd2\x1d\x21\xb3\x98\x85\xa9\x98\x7e\x55\x4a\x45\xe7\xba\x73\x39\x1d\x8b\xc5\x37\x0b\xb8\xf9\x46\x01\x37\xdf\x28\xa0\xf4\x31\x46\x89\x28\x49\xac\xd2\xa5\x3a\x1b\x3a\xe4\xd6\x25\x4a\x2e\x4a\xb7\x0e\x83\xe1\x99\xdf\x75\x3a\xf4\xaf\x7f\x33\xec\x3a\xc7\x4f\xe1\xeb\xaa\x89\x92\xbb\x99\x4a\xb1\x6b\x3b\x5a\x90\x5d\xfa\x9f\x9e\xfd\x9b\x61\x43\x7d\xf8\xf2\xc5\xe8\x78\xf4\x54\xa1\xd0\xa2\xa1\x26\x5a\x1b\x0e\x95\xec\xaf\xc8\xfb\xfe\xc8\xec\xc8\x8b\x52\x0c\xf3\x1d\xb9\x9d\x23\x78\x75\xb4\x25\xbd\x11\x36\xe3\xc6\x17\x95\x25\x2f\x36\x22\xe6\x4c\x4a\xc6\xa7\x6d\x18\xcc\x58\x96\x11\x4a\x28\xdb\x4e\xbb\x3c\x62\x15\x43\x73\x7c\xa2\x04\xa3\xd9\x28\xcb\xf1\x0e\x79\x75\xcc\x75\x4d\xd2\xe1\x36\x06\x93\xbe\xb4\x66\x37\xed\xdc\xe2\xd4\x32\x0b\x6c\x3e\xc7\x98\x85\x8a\x5a\xa5\x98\x80\xe0\x48\x3f\x2a\x41\x89\x06\xc1\x50\xf3\xcd\x72\x94\xc8\x95\xd5\x82\x03\x6c\x4f\xdb\x2f\x60\x8c\x51\x58\x48\xd3\xc9\x2b\x30\x82\xfc\x8e\xe5\x82\xcf\x91\x2b\xb8\x0f\xb9\xd2\x10\x27\x09\x79\x9c\xe2\x5e\xc0\xc2\x94\xc4\x74\x72\xd8\x34\x09\x6c\xe7\xdd\xe5\xb9\xef\xb5\xeb\x55\xbe\x01\xba\x3c\x2e\x46\x25\xbb\x1a\x37\x7b\x9b\x4d\xad\xcc\xff\x9f\xb6\xa3\x8a\xbe\x6d\xe3\x3e\x47\xb2\x09\x54\xc8\x2b\x2e\xc1\x0b\x67\x7c\x6a\x65\x2c\x16\xf5\x57\xf5\xa3\xf2\xfc\x79\x15\xa1\x47\x38\x3a\x65\x0f\x0a\x2e\x86\xfe\xe9\x75\x6f\x18\x5c\x5e\x10\x6f\x02\xa7\x38\xcf\xd4\x72\x0b\x3a\x6f\xd3\x36\x71\xb4\x91\x44\x3d\xc4\x18\x1e\x63\x56\x66\x53\xdf\xbf\xaa\x27\xd3\x67\x70\x0e\xee\x13\x16\x25\x24\xff\xea\x70\x2b\xa5\x4c\x49\xea\xfb\x57\xa4\xc9\x77\xa6\x72\xa5\xee\xe4\x41\xdd\xd1\x4e\xda\x1a\x09\xfd\x1a\xa4\x6e\x48\xba\x32\x18\x9d\xc0\x61\x29\x0b\x26\xb9\x98\xc3\x3d\x53\x09\xe3\x75\xa4\xa8\x75\xa8\x99\xbd\xdb\x81\x1b\x72\xab\xc5\x87\x46\x6e\xd0\xae\xad\xe1\x29\xf9\xbc\x8c\xe9\x63\xf2\x5e\x43\x82\x3c\x42\x28\xa4\x46\xfe\x06\xa0\x5e\x17\x5c\x8f\x08\x84\x08\xba\x5a\x8d\x16\xc4\xa8\x30\x9f\x33\x8e\x70\x9f\x60\xde\x3c\x52\xda\x5e\x99\x88\x22\x8d\x69\x58\x60\x5c\xaa\x30\x4d\x31\xd6\xda\x7f\x04\xc7\xff\x10\xf4\xc1\xe5\x48\x9d\xfa\xd3\x43\x5c\xfa\xfe\x60\x18\x5c\xe8\xa8\x13\x7e\x19\x95\xde\xed\xee\x3b\x5b\x61\x96\xa5\x2c\xd2\xb9\x2c\x75\x98\x06\x7f\x0d\x86\xfe\xf9\xe8\xcf\xa0\xef\x77\x6d\xdb\xaa\xea\xd8\xa3\x3c\x77\x30\xd9\x0e\xc7\x96\xb6\x79\x11\x4f\xdd\x39\xe1\xf2\x90\xc7\xfa\x81\x45\x82\xbb\x39\x4a\x51\xe4\x11\xee\x48\x76\xdd\xb9\x88\x11\xe4\x52\x2a\x9c\x1b\x7c\x1c\x3f\x40\xad\x2b\x03\xdd\x1f\x51\xaa\x79\x70\xdd\xfd\x28\xcd\x6a\x81\x4e\x7d\xca\xf3\x1d\x9f\xb3\x87\x99\x41\xe9\xa8\x90\xd2\x6c\x02\x52\xbc\xa0\x30\xd1\x1a\x4d\x7e\x99\x60\x65\x9d\x23\x0e\x92\x86\x88\x2a\xfe\xd6\x43\x2d\xde\xd2\xbb\x91\x67\x25\xd4\xf3\xfb\xa3\xde\xd5\xd5\xe8\x0f\xff\x7a\x10\x5c\x5e\x74\x9d\x83\x69\x8e\x19\xd8\xff\x73\xe3\x56\xfc\xdc\x37\x05\x4b\xe3\x20\xee\xda\xf0\xff\xb2\x1b\xbe\x40\x82\x61\x0c\x2e\x87\x0e\x7c\x81\xa8\x50\xe0\xc6\x60\x83\x4d\x07\xb1\x73\x68\x52\xff\x7b\x14\xa9\x9d\xdb\xaf\xb2\x6e\x99\xe3\xbc\xc9\xe3\x13\x70\xf6\x3a\x00\x74\x7d\x3c\xd1\xb3\x5a\xb5\x66\x57\x25\xc9\xde\xbf\xc7\x26\x64\x6b\x37\x76\x3c\xde\xff\x28\x9d\x56\x2b\x36\x81\x36\x61\x63\x72\xcf\x7a\xbd\x0f\x94\x0f\x82\x33\xff\x62\xb8\x17\x90\xb7\xe8\x60\xde\x83\xff\xe1\xac\x07\x82\x9b\x12\xdd\xc8\xa1\x58\xa0\xe4\x3f\x28\x92\x2b\x55\xa5\xfc\xb3\xaf\xa7\xc4\x37\x62\x35\xd2\x40\x70\x88\x42\x1e\x61\x0a\x92\xcd\xb3\x74\xa9\x6d\x94\x3a\x59\x45\x91\x9b\x99\xc1\x74\xe0\x1c\xd2\xb0\xe0\x51\x82\x92\xda\xcf\x0b\x9d\xc8\xdb\x93\x01\xcd\xdb\xa8\xc0\x54\x21\x01\x47\x9a\x8f\x99\xaf\x05\x74\x48\x2b\x6d\x6c\x58\xd2\x97\x5a\x6c\xcd\x20\x47\xe5\xf2\x3f\x41\x49\x82\x8b\x2e\xe3\x13\xf1\x80\x25\x57\xab\xf6\x55\x2e\xe2\x22\x52\x55\x9e\xba\x2e\x79\x91\x06\xf3\xe6\x30\xb5\x89\x17\x91\x88\x99\x9b\x86\x63\x4c\xbb\xbd\x69\x8e\x48\xf0\x4c\xbb\xa3\x5c\xec\x33\x19\xea\x75\x13\xea\x40\xbe\x53\xf3\x94\x18\xac\xd7\xae\x9b\xa8\x79\xba\x5a\x21\x8f\xd7\xeb\x6a\x84\xd1\xc9\x99\x9f\x80\xf3\x6b\x35\xde\x7c\x1b\x62\xa5\x50\x44\x21\xa7\xae\x30\x61\x3c\x86\x90\x2f\x41\x64\x1a\xe4\x28\x41\xc5\x2f\x42\xd0\x0a\x7a\x1b\x8d\xc6\x85\x52\x82\x4b\x5d\x19\x4b\x9e\x6d\xe8\x51\xdc\x26\x13\x16\xb1\x30\x05\x5c\x84\xf3\x2c\x45\xfa\x8d\x54\xba\xd4\x2d\x06\x2e\xdf\x97\x3b\xf5\x65\x97\x3c\xf1\x3c\x85\x51\x32\x0e\x25\xb6\x67\x31\xb6\x45\x3e\xf5\xfa\x78\x87\xa9\xc8\x08\x86\x79\xc3\x42\x89\x9c\x85\xa9\xf4\x06\x09\xa6\xe9\x68\xa0\xaf\x53\x18\x9f\x8e\x88\xdb\xe8\x7d\xdf\x1f\xf5\xb5\x6c\xd9\xf2\x8d\xb8\xd1\x71\xa7\x3d\x32\x11\x1a\x8b\xc5\xc8\x68\x36\x1a\x8b\xc5\xc6\x50\xdd\xe6\x96\x10\x51\xdf\xbd\x47\xc8\x42\x29\x41\xbb\x5b\x02\xed\x7a\x3c\xfc\x35\x10\x6f\xb8\xc3\xe3\x71\x5d\xa2\x34\x31\x84\x7d\x81\x05\xbb\xf2\xe3\x66\xbc\xd4\xbf\x5a\x27\xe7\x57\x60\x55\x58\x8e\x0e\xcb\x7f\xf6\x24\x6a\xa7\xf6\xca\x44\xfe\x8c\x45\xc8\x25\x6e\x12\xdc\x2e\x29\x5e\xbf\xde\x90\x76\x0e\x1f\xdd\x45\xd1\xdf\xde\xd9\x28\x3b\x5b\xac\xdc\x3d\xbc\x7a\x1c\x0a\x8e\x8b\x0c\x23\x3a\x8f\x66\xba\x4d\x42\x09\x22\x8a\x8a\x3c\xc7\xb8\x6d\x7f\xdd\x9e\x52\x04\xca\x30\xda\xd4\xba\x2a\xcf\x4d\xcd\xc3\xbf\xa1\x3d\xd0\x7d\x35\xa8\xc1\x71\x3b\x94\x33\xfb\xbb\xab\x20\x65\xc4\x3d\x42\x28\x67\xba\x05\x16\x12\xf3\x4d\x35\xbc\x47\x48\xc2\x3b\x84\x89\x28\x78\x0c\x5c\x40\x8e\xa1\x34\x67\x42\xce\x58\x06\x05\x57\x2c\xd5\xe5\x46\x33\x2a\x27\xaa\xc0\x34\x07\x1b\xec\x3f\x35\xee\x59\x8a\x42\x5f\xe5\xd1\xb6\x0a\x78\x23\x38\x07\x94\xf4\xfa\xda\x6e\xa3\xe7\xa1\x39\x23\x4b\x2a\x7d\x06\x37\xfc\x7a\xcb\x6f\xb9\xbe\x9a\x34\x77\xb4\x71\x4c\x5d\x5b\x09\x43\x53\x07\x2a\x30\x47\x5e\x98\x2e\x6f\xe4\x03\xc1\x13\xd9\xbe\xe5\xc1\x44\xab\x10\x0b\xaa\xe5\xb1\x30\xf7\x92\xb4\x12\x85\x1c\xa4\x22\xbe\xa6\xb4\x6a\x07\xd4\x78\xc2\x78\x09\xb1\x28\xc6\x29\xba\x51\xca\xa2\x19\xe1\x40\xd1\xbc\xab\x6c\xdb\x8d\xe8\x54\x88\xa4\x42\x18\x31\x66\xc8\x63\xe4\x11\xa3\xb2\x9d\x63\x35\x87\xd1\x19\x24\xf3\x4b\x2b\xe1\xe0\x7e\x73\x4d\x3d\x2e\xf4\xbc\xa5\xe7\xb7\xc3\x87\x3b\xf1\x68\xca\x54\x7b\x92\x23\x96\x8d\x47\x57\x8a\x45\x3c\xf5\xca\x67\x5d\x6b\xdd\x42\xb1\x54\x7a\x0f\x13\x01\x34\xde\x96\x8e\xa9\xbd\xde\x45\x71\xcd\x77\x04\xf7\xb6\x96\x2a\x8e\xe4\xee\x0d\xa2\x6b\xf0\x07\xd7\xcd\x71\x4c\x18\x43\xef\xd7\x7d\xc2\x8d\xc2\x28\x41\xb8\xb5\x00\x5c\xf7\x0e\x79\x2c\xf2\x6e\xf3\x26\xde\x75\x25\x2a\x77\x86\xcb\x2e\x61\xeb\xf2\xf1\x2e\x4c\x0b\xec\xda\xb7\xe6\xf2\x4f\xe7\xc8\xfa\xd6\x86\x7f\x7d\xb0\x4b\x56\xd5\x9e\x1a\xba\xf9\x5d\xcc\xf5\x04\xdb\xe0\x70\x8a\x1c\x29\xed\xf4\x25\x7d\x75\x2d\x5c\xe3\x41\x4e\xd0\x3d\xec\xba\x74\xc4\x43\x13\xab\x44\x0c\xf3\xe5\x8e\x66\x0f\x6a\x79\x1e\x78\xb7\xb7\x72\xbd\x03\xa9\x8c\x8c\x98\xe5\x8f\xa3\xbe\x8a\x88\xf0\x72\xf7\xe7\x97\x2f\x29\x8f\x0a\x5e\x79\x93\x26\x5a\x26\x0a\x69\xf2\xd9\xda\x09\x59\x8d\xd4\x75\xb9\x28\xb2\x98\x8e\x97\xeb\x4a\xf6\x19\xa1\xf3\x1f\xd8\x63\xd5\x77\x32\x39\xfe\xf7\x13\x30\xf9\xe9\xf8\x09\x98\xfc\xfb\xd5\x13\x30\xf9\xcf\x53\x98\xf3\xf3\x53\x98\xf3\xcb\x53\x44\xa7\x73\xfc\x14\x4e\x39\x7e\xf9\x14\xba\xbc\xec\x3c\x85\x5b\x3a\x47\x8f\x64\x9c\xd5\xda\x14\x77\x2a\xc2\xc4\xb1\xfc\x48\xb7\x5a\xe5\xe6\xeb\x1e\xe3\x31\x2e\x08\x19\xd3\xbb\x93\x2e\xb4\x03\x3a\x35\xeb\xf5\x1e\x15\xf6\x2a\x10\x09\xae\xef\xa2\xc3\x2c\x93\x95\x3e\xab\x95\x66\xd7\x1e\xb0\xcf\xb8\x5e\xd7\x41\x8f\x59\xaf\x50\x8f\xbd\x5a\x39\x3b\x3a\x37\x3b\x77\xfb\x9c\xcd\x71\xb8\xcc\xb0\x9c\x58\x36\x33\x75\xa5\x8c\x53\x9b\xa1\xb5\x66\xa6\x58\x36\x90\x56\x93\x47\x4d\xc4\xae\x8d\x1a\xba\x1a\xe3\xc8\x7b\xc1\x5e\xef\x69\x0c\x4b\x4b\x5a\x13\xb5\xcc\xd0\x0a\x7e\xbf\xbc\x18\x74\x9d\x03\x8d\x86\xf7\x7e\x7a\xd1\xd5\xc8\xb3\xc1\xbd\x4f\x84\x41\xf9\x60\xff\xe8\x11\x07\x62\x20\xbd\x1f\xdb\x19\x9f\xee\xdc\x25\xab\xbc\xc0\x43\x8b\xe4\x91\x04\x6a\x83\x8e\x16\x05\xe5\xf7\x36\x7a\x18\x0d\x82\xff\xf6\xbb\xce\x41\x75\x5d\x4e\x6b\x7a\xec\xcd\xf1\xae\x36\x95\x7a\x7a\x2a\xfd\x69\x67\x7d\xf1\x30\xad\xfe\x53\xcc\xab\x40\x6f\x34\xae\xa2\x6d\x04\x6a\x25\xd6\x35\xf1\x75\xbc\xa2\x75\xff\x02\x12\x63\x1a\x06\x7f\x90\x1e\xd9\xea\x79\xd3\x1f\x0e\x2d\xfd\x71\xd0\xda\x6e\x94\x8d\x38\x98\xdb\x94\xf3\xe0\xdc\xb7\xa6\x6a\xe6\x9a\x55\xa3\xa7\xee\x92\xd6\xff\x06\x00\x00\xff\xff\x8f\xe5\x73\xfa\x56\x1f\x00\x00")

func appimageTemplatesApprunShBytes() ([]byte, error) {
	return bindataRead(
		_appimageTemplatesApprunSh,
		"appimage/templates/AppRun.sh",
	)
}

func appimageTemplatesApprunSh() (*asset, error) {
	bytes, err := appimageTemplatesApprunShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appimage/templates/AppRun.sh", size: 8024, mode: os.FileMode(493), modTime: time.Unix(1554315247, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appimage/templates/AppRun.sh": appimageTemplatesApprunSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"appimage": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"AppRun.sh": &bintree{appimageTemplatesApprunSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
